name: Release Management

on:
    push:
        branches:
            - main
            - dev

permissions:
    contents: write
    issues: write
    pull-requests: write
    packages: write

jobs:
    check-promotion:
        runs-on: ubuntu-latest
        outputs:
            should-promote: ${{ steps.check.outputs.promote }}
            from-branch: ${{ steps.check.outputs.from-branch }}
            to-branch: ${{ steps.check.outputs.to-branch }}
        
        steps:
            - name: Checkout
              uses: actions/checkout@v4
              with:
                  fetch-depth: 0
                  token: ${{ secrets.GITHUB_TOKEN }}
            
            - name: Check for promotion
              id: check
              run: |
                  # Check if latest commit message contains [promote]
                  commit_msg=$(git log -1 --pretty=%B)
                  echo "Latest commit message: $commit_msg"
                  
                  if [[ "$commit_msg" == *"[promote]"* ]]; then
                      echo "Promotion requested in commit message"
                      current_branch="${GITHUB_REF#refs/heads/}"
                      
                      if [[ "$current_branch" == "dev" ]]; then
                          echo "promote=true" >> $GITHUB_OUTPUT
                          echo "from-branch=dev" >> $GITHUB_OUTPUT
                          echo "to-branch=main" >> $GITHUB_OUTPUT
                          echo "Will promote from dev to main"
                      else
                          echo "promote=false" >> $GITHUB_OUTPUT
                          echo "Promotion only supported from dev branch"
                      fi
                  else
                      echo "promote=false" >> $GITHUB_OUTPUT
                      echo "No promotion requested"
                  fi
    
    promote:
        needs: check-promotion
        if: needs.check-promotion.outputs.should-promote == 'true'
        runs-on: ubuntu-latest
        
        steps:
            - name: Checkout
              uses: actions/checkout@v4
              with:
                  fetch-depth: 0
                  token: ${{ secrets.GITHUB_TOKEN }}
            
            - name: Setup Git
              run: |
                  git config --global user.name "github-actions[bot]"
                  git config --global user.email "github-actions[bot]@users.noreply.github.com"
            
            - name: Promote to main
              run: |
                  echo "Promoting from ${{ needs.check-promotion.outputs.from-branch }} to ${{ needs.check-promotion.outputs.to-branch }}"
                  
                  # Install Node.js for package.json operations
                  curl -fsSL https://deb.nodesource.com/setup_lts.x | sudo -E bash -
                  sudo apt-get install -y nodejs
                  
                  # Switch to main branch
                  git checkout main
                  git pull origin main
                  
                  # Merge dev into main
                  git merge origin/dev --no-ff -m "chore: promote dev to main [skip ci]"
                  
                  # Clean up version number (remove -dev suffix)
                  current_version=$(node -p "require('./package.json').version")
                  clean_version=$(echo "$current_version" | sed 's/-dev\.[0-9]*$//')
                  
                  echo "Current version: $current_version"
                  echo "Clean version: $clean_version"
                  
                  # Update package.json with clean version
                  node -e "
                    const fs = require('fs');
                    const pkg = JSON.parse(fs.readFileSync('package.json', 'utf8'));
                    pkg.version = '$clean_version';
                    fs.writeFileSync('package.json', JSON.stringify(pkg, null, 2) + '\n');
                  "
                  
                  # Update README with new version
                  if [ -f "scripts/update-readme-version.sh" ]; then
                      chmod +x scripts/update-readme-version.sh
                      ./scripts/update-readme-version.sh "$clean_version"
                  fi
                  
                  # Commit the cleaned version
                  git add package.json README.md
                  git commit -m "chore: clean version to $clean_version for main release [skip ci]" || echo "No changes to commit"
                  
                  # Push to main
                  git push origin main
                  
                  echo "✅ Successfully promoted to main branch with clean version $clean_version"
    
    publish-release:
        needs: [check-promotion, promote]
        if: always() && (github.ref == 'refs/heads/main' || needs.check-promotion.outputs.should-promote == 'true')
        runs-on: ubuntu-latest
        
        steps:
            - name: Checkout
              uses: actions/checkout@v4
              with:
                  fetch-depth: 0
                  token: ${{ secrets.GITHUB_TOKEN }}
                  ref: main
            
            - name: Install pnpm
              uses: pnpm/action-setup@v2
              with:
                  version: latest
            
            - name: Setup Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: 'lts/*'
                  cache: 'pnpm'
            
            - name: Install dependencies
              run: pnpm install --frozen-lockfile
            
            - name: Install GitHub CLI
              run: |
                  type -p curl >/dev/null || sudo apt update && sudo apt install curl -y
                  curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg \
                  && sudo chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg \
                  && echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null \
                  && sudo apt update \
                  && sudo apt install gh -y
            
            - name: Type check
              run: pnpm type-check
            
            - name: Lint
              run: pnpm lint
            
            - name: Publish GitHub Release
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              run: |
                  # Configure git for tagging
                  git config --global user.name "github-actions[bot]"
                  git config --global user.email "github-actions[bot]@users.noreply.github.com"
                  
                  # Check if version in package.json has a corresponding tag
                  current_version=$(node -p "require('./package.json').version")
                  tag_name="v${current_version}"
                  
                  echo "Current version: $current_version"
                  echo "Expected tag: $tag_name"
                  
                  # Check if tag already exists
                  if git rev-parse "$tag_name" >/dev/null 2>&1; then
                      echo "Tag $tag_name already exists, checking if GitHub release exists..."
                      
                      # Check if GitHub release exists
                      if gh release view "$tag_name" >/dev/null 2>&1; then
                          echo "GitHub release for $tag_name already exists, skipping"
                      else
                          echo "Creating GitHub release for existing tag $tag_name"
                          # Extract changelog for this version
                          changelog_content=$(awk "/^## \[${current_version}\]/{flag=1; next} /^## \[/{flag=0} flag" CHANGELOG.md || echo "Release notes not available")
                          
                          gh release create "$tag_name" \
                              --title "Release $current_version" \
                              --notes "$changelog_content" \
                              --latest
                      fi
                  else
                      echo "No matching tag found for version $current_version"
                      echo "This indicates the local semantic-release didn't run or failed"
                      echo "Current tags:"
                      git tag --sort=-version:refname | head -5
                  fi
    
    sync-dev:
        needs: [check-promotion, promote, publish-release]
        if: always() && needs.check-promotion.outputs.should-promote == 'true'
        runs-on: ubuntu-latest
        
        steps:
            - name: Checkout
              uses: actions/checkout@v4
              with:
                  fetch-depth: 0
                  token: ${{ secrets.GITHUB_TOKEN }}
                  ref: main
            
            - name: Sync dev with main
              run: |
                  git config --global user.name "github-actions[bot]"
                  git config --global user.email "github-actions[bot]@users.noreply.github.com"
                  
                  # Switch to dev and merge main back
                  git checkout dev
                  git pull origin dev
                  git merge origin/main --no-ff -m "chore: sync dev with main after promotion [skip ci]"
                  git push origin dev
                  
                  echo "✅ Successfully synced dev with main"
