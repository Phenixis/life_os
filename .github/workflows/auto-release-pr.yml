name: Promote to Stable Release

on:
    workflow_dispatch:
        inputs:
            promote_type:
                description: 'Type of promotion'
                required: true
                default: 'stable'
                type: choice
                options:
                - stable
                - hotfix
    
    # Optionally trigger on specific commit messages
    push:
        branches:
            - dev
        paths:
            - '**'
        # Only when commit message contains [promote]
        # This is handled in the job condition

permissions:
    contents: write
    pull-requests: write
    issues: write

jobs:
    check-for-promotion:
        runs-on: ubuntu-latest
        # Only run if manually triggered OR commit message contains [promote]
        if: github.event_name == 'workflow_dispatch' || contains(github.event.head_commit.message, '[promote]')
        
        steps:
            - name: Checkout
              uses: actions/checkout@v4
              with:
                  fetch-depth: 0
                  token: ${{ secrets.GITHUB_TOKEN }}
            
            - name: Check if promotion is needed
              id: check-promotion
              run: |
                  # Check if there are unpromoted pre-releases
                  git fetch origin main
                  
                  # Get the latest pre-release version from dev
                  DEV_VERSION=$(node -p "require('./package.json').version" 2>/dev/null || echo "0.0.0")
                  
                  # Get the latest stable version from main
                  git checkout main
                  MAIN_VERSION=$(node -p "require('./package.json').version" 2>/dev/null || echo "0.0.0")
                  git checkout dev
                  
                  echo "Dev version: $DEV_VERSION"
                  echo "Main version: $MAIN_VERSION"
                  
                  # Check if dev has a higher version (indicating unreleased changes)
                  if [[ "$DEV_VERSION" != "$MAIN_VERSION" ]]; then
                      # Remove pre-release suffix for comparison
                      DEV_BASE_VERSION=$(echo $DEV_VERSION | sed 's/-dev\.[0-9]*$//')
                      
                      echo "Promotion needed: $DEV_BASE_VERSION -> stable"
                      echo "should_promote=true" >> $GITHUB_OUTPUT
                      echo "new_version=$DEV_BASE_VERSION" >> $GITHUB_OUTPUT
                  else
                      echo "No promotion needed"
                      echo "should_promote=false" >> $GITHUB_OUTPUT
                  fi
            
            - name: Create Pull Request for Stable Release
              if: steps.check-promotion.outputs.should_promote == 'true'
              id: create-pr
              uses: actions/github-script@v7
              with:
                  script: |
                      const { data: existingPRs } = await github.rest.pulls.list({
                          owner: context.repo.owner,
                          repo: context.repo.repo,
                          head: 'dev',
                          base: 'main',
                          state: 'open'
                      });
                      
                      if (existingPRs.length > 0) {
                          console.log('PR already exists:', existingPRs[0].html_url);
                          return { pr_number: existingPRs[0].number, pr_url: existingPRs[0].html_url };
                      }
                      
                      const newVersion = '${{ steps.check-promotion.outputs.new_version }}';
                      const title = `feat: promote v${newVersion} to stable release`;
                      const body = `## üöÄ Promote Pre-release to Stable
                      
                      This PR promotes the current pre-release version to a stable release.
                      
                      ### Version Details:
                      - **New Stable Version**: \`v${newVersion}\`
                      - **Pre-release**: Available on \`dev\` branch
                      - **Promotion**: Moving to \`main\` for stable release
                      
                      ### What's included:
                      - All features and fixes from the \`dev\` branch
                      - Updated version number (removes pre-release suffix)
                      - Full changelog will be generated automatically
                      
                      ---
                      
                      **Note**: This PR was automatically created. Review and merge when ready to publish the stable release.`;
                      
                      const { data: pr } = await github.rest.pulls.create({
                          owner: context.repo.owner,
                          repo: context.repo.repo,
                          title: title,
                          body: body,
                          head: 'dev',
                          base: 'main'
                      });
                      
                      console.log('Created promotion PR:', pr.html_url);
                      return { pr_number: pr.number, pr_url: pr.html_url };
            
            - name: Wait for checks and auto-merge
              if: steps.check-promotion.outputs.should_promote == 'true' && steps.create-pr.outputs.result
              uses: actions/github-script@v7
              with:
                  script: |
                      const result = ${{ steps.create-pr.outputs.result }};
                      const prNumber = result.pr_number;
                      
                      // Wait a bit for other checks to start
                      await new Promise(resolve => setTimeout(resolve, 30000));
                      
                      // Check PR status
                      const { data: pr } = await github.rest.pulls.get({
                          owner: context.repo.owner,
                          repo: context.repo.repo,
                          pull_number: prNumber
                      });
                      
                      if (pr.mergeable === false) {
                          console.log('PR has conflicts, cannot auto-merge');
                          // Add comment about conflicts
                          await github.rest.issues.createComment({
                              owner: context.repo.owner,
                              repo: context.repo.repo,
                              issue_number: prNumber,
                              body: '‚ö†Ô∏è **Auto-merge failed**: This PR has merge conflicts. Please resolve them manually and the PR will be ready for merge.'
                          });
                          return;
                      }
                      
                      // Check if all checks are passing
                      const { data: checks } = await github.rest.checks.listForRef({
                          owner: context.repo.owner,
                          repo: context.repo.repo,
                          ref: pr.head.sha
                      });
                      
                      const allChecksPassed = checks.check_runs.every(check => 
                          check.status === 'completed' && check.conclusion === 'success'
                      );
                      
                      if (allChecksPassed || checks.check_runs.length === 0) {
                          // Add comment before merging
                          await github.rest.issues.createComment({
                              owner: context.repo.owner,
                              repo: context.repo.repo,
                              issue_number: prNumber,
                              body: 'üöÄ **Auto-merging**: All checks passed! This will trigger a release on main branch.'
                          });
                          
                          // Merge the PR
                          await github.rest.pulls.merge({
                              owner: context.repo.owner,
                              repo: context.repo.repo,
                              pull_number: prNumber,
                              commit_title: `feat: automated release merge`,
                              commit_message: 'Automated merge for release preparation\n\n[skip ci]',
                              merge_method: 'squash'
                          });
                          
                          console.log('PR merged successfully');
                      } else {
                          console.log('Some checks are still pending or failed, skipping auto-merge');
                          await github.rest.issues.createComment({
                              owner: context.repo.owner,
                              repo: context.repo.repo,
                              issue_number: prNumber,
                              body: '‚è≥ **Auto-merge pending**: Waiting for all checks to pass. The PR will be auto-merged once all validations complete successfully.'
                          });
                      }
